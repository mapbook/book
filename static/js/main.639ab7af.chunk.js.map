{"version":3,"sources":["logo.svg","components/FormComponent.jsx","components/NavbarComponent.jsx","components/Card.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","FormComponent","state","value","handleChange","event","_this","target","setState","_this2","this","react_default","a","createElement","Fragment","onSubmit","trim","props","clearForm","className","onChange","type","id","placeholder","Component","NavbarComponent","href","Card","country","getInformation","class","src","flag","width","heigth","population","toLocaleString","capital","getLanguageList","languageList","i","languages","length","push","key","name","App","data","cards","onFormSubmit","countryName","preventDefault","fetchData","components_NavbarComponent","components_FormComponent","fetch","then","results","json","generateCards","countryPopulation","countryCapital","countryLanguages","flagLink","components_Card","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.639ab7af.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\n//API CALL - https://restcountries.eu/rest/v2/name/{name}\r\n\r\nclass FormComponent extends Component {\r\n  state = {\r\n    value: \"\"\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <form\r\n          onSubmit={event => {\r\n            let trimmed = this.state.value.trim();\r\n            if (trimmed != \"\") {\r\n              this.props.onSubmit(event, this.state.value);\r\n            }\r\n            this.clearForm();\r\n          }}\r\n          className=\"m-2\"\r\n        >\r\n          <div className=\"container\">\r\n            <div className=\"form-group m-4\">\r\n              <input\r\n                onChange={event => {\r\n                  this.handleChange(event);\r\n                  let trimmed = this.state.value.trim();\r\n                  if (trimmed != \"\") {\r\n                    this.props.onSubmit(event, this.state.value);\r\n                  }\r\n                }}\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"transactionField\"\r\n                value={this.state.value}\r\n                placeholder=\"Enter country\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  clearForm() {\r\n    this.state.value = \"\";\r\n    this.setState({});\r\n  }\r\n\r\n  handleChange = event => {\r\n    this.state.value = event.target.value;\r\n    this.setState({});\r\n  };\r\n}\r\n\r\nexport default FormComponent;\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nclass NavbarComponent extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n          <div className=\"container\">\r\n            <a className=\"navbar-brand\" href=\"#\">\r\n              MapBook\r\n            </a>\r\n          </div>\r\n        </nav>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavbarComponent;\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nclass Card extends Component {\r\n  state = {};\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"container\">\r\n          <div className=\"card m-4 shadow\">\r\n            <div className=\"card-body\">\r\n              <div className=\"row\">\r\n                <div className=\"col-md-6 text-center\">\r\n                  <h3 className=\"text-center\">{this.props.country}</h3>\r\n                  {this.getInformation()}\r\n                </div>\r\n                <div className=\"col-md-6 my-auto\">\r\n                  <div class=\"container\">\r\n                    <center>\r\n                      <img src={this.props.flag} width=\"300\" heigth=\"200\" />\r\n                    </center>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getInformation() {\r\n    if (this.props.population === \"\") {\r\n      return <div />;\r\n    } else {\r\n      return (\r\n        <div>\r\n          <h5>Population:</h5> {this.props.population.toLocaleString()}\r\n          <h5>Capital:</h5> {this.props.capital}\r\n          {this.getLanguageList()}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  getLanguageList() {\r\n    let languageList = [];\r\n    for (let i = 0; i < this.props.languages.length; i++) {\r\n      languageList.push(<li key={i}>{this.props.languages[i].name}</li>);\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h5>Languages:</h5>\r\n        <ul class=\"list-unstyled\">{languageList}</ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport FormComponent from \"./components/FormComponent\";\nimport NavbarComponent from \"./components/NavbarComponent\";\nimport Card from \"./components/Card\";\n\nclass App extends Component {\n  state = {\n    data: [],\n    cards: []\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavbarComponent />\n        <FormComponent onSubmit={this.onFormSubmit} />\n        {this.state.cards};\n      </React.Fragment>\n    );\n  }\n\n  onFormSubmit = (event, countryName) => {\n    event.preventDefault();\n    this.state.data = [];\n    this.state.cards = [];\n    this.fetchData(countryName);\n  };\n\n  fetchData(countryName) {\n    fetch(\"https://restcountries.eu/rest/v2/name/\" + countryName).then(\n      results => {\n        results.json().then(data => {\n          this.state.data = data;\n          this.generateCards();\n        });\n      }\n    );\n  }\n\n  generateCards() {\n    for (let i = 0; i < this.state.data.length; i++) {\n      let countryName = this.state.data[i].name;\n      let countryPopulation = this.state.data[i].population;\n      let countryCapital = this.state.data[i].capital;\n      let countryLanguages = this.state.data[i].languages;\n      let flagLink = this.state.data[i].flag;\n      this.state.cards.push(\n        <Card\n          key={i}\n          country={countryName}\n          population={countryPopulation}\n          capital={countryCapital}\n          languages={countryLanguages}\n          flag={flagLink}\n        />\n      );\n    }\n    if (this.state.cards.length === 0) {\n      this.state.cards.push(\n        <Card key={0} country=\"No Country Found\" population=\"\" />\n      );\n    }\n    this.setState({});\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}